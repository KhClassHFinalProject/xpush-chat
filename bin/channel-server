#!/usr/bin/env node

var fs       = require('fs'),
    argv     = require('optimist').argv,
    xpush    = require('../lib/index'),
    utils    = require('../lib/utils'),
    daemon   = require('../lib/daemon/daemon-handler');

var help = [
    "usage: session-server [options] ",
    "",
    "Starts a xpush server using the specified command-line options",
    "",
    "options:",
    "  --port   PORT       Port that the xpush server should run on",
    "  --config OUTFILE    (mandatory!) Location of the configuration file for the xpush server",
    "  --host   DOMAIN     Hostname",
    "  -h, --help          You're staring at it"
].join('\n');


if (argv.h || argv.help || Object.keys(argv).length === 2 || !argv.config) {
  return console.log(help);
}

var config = {},
    server;

try {
  var data = fs.readFileSync(argv.config);
  config = JSON.parse(data.toString());
} catch (ex) {
  console.error('Error starting xpush server: ' + ex);
  process.exit(1);
}

var options = {};

options['config_path'] = argv.config;

if(config.zookeeper) options['zookeeper'] = config.zookeeper;
if(config.redis) options['redis'] = config.redis;
if(config.mongodb) options['mongodb'] = config.mongodb;
if(config.sessionServer) {
    options['port'] = config.channelServer.port;
}

options['host'] = argv.host || utils.getIP();
if(argv.port) options['port'] = argv.port;


daemon.startDaemon(options, function(err){
    if(err){
        console.error('\n\n process daemon was not yet finished \n');
        if(err.code == 'PID_EXISTED') {
            console.info(err.message);
        }
    }else{

        // FINALLY STARTING !!
        server = xpush.createChannelServer(options);

    }
});